// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.retail.v2;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/cloud/retail/v2/product.proto";
import "google/cloud/retail/v2/user_event.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option csharp_namespace = "Google.Cloud.Retail.V2";
option go_package = "google.golang.org/genproto/googleapis/cloud/retail/v2;retail";
option java_multiple_files = true;
option java_outer_classname = "ImportConfigProto";
option java_package = "com.google.cloud.retail.v2";
option objc_class_prefix = "RETAIL";
option php_namespace = "Google\\Cloud\\Retail\\V2";
option ruby_package = "Google::Cloud::Retail::V2";

// Google Cloud Storage location for input content.
// format.
message GcsSource {
  // Required. Google Cloud Storage URIs to input files. URI can be up to
  // 2000 characters long. URIs can match the full object path (for example,
  // `gs://bucket/directory/object.json`) or a pattern matching one or more
  // files, such as `gs://bucket/directory/*.json`. A request can
  // contain at most 100 files, and each file can be up to 2 GB. See
  // [Importing product
  // information](https://cloud.google.com/recommendations-ai/docs/upload-catalog)
  // for the expected file format and setup instructions.
  repeated string input_uris = 1 [(google.api.field_behavior) = REQUIRED];

  // The schema to use when parsing the data from the source.
  //
  // Supported values for product imports:
  //
  // * `product` (default): One JSON [Product][google.cloud.retail.v2.Product]
  // per line. Each product must
  //   have a valid [Product.id][google.cloud.retail.v2.Product.id].
  // * `product_merchant_center`: See [Importing catalog data from Merchant
  //   Center](https://cloud.google.com/retail/recommendations-ai/docs/upload-catalog#mc).
  //
  // Supported values for user events imports:
  //
  // * `user_event` (default): One JSON
  // [UserEvent][google.cloud.retail.v2.UserEvent] per line.
  // * `user_event_ga360`: Using
  //   https://support.google.com/analytics/answer/3437719?hl=en.
  string data_schema = 2;
}

// BigQuery source import data from.
message BigQuerySource {
  // The project id (can be project # or id) that the BigQuery source is in with
  // a length limit of 128 characters. If not specified, inherits the project
  // id from the parent request.
  string project_id = 5;

  // Required. The BigQuery data set to copy the data from with a length limit
  // of 1,024 characters.
  string dataset_id = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The BigQuery table to copy the data from with a length limit of
  // 1,024 characters.
  string table_id = 2 [(google.api.field_behavior) = REQUIRED];

  // Intermediate Cloud Storage directory used for the import with a length
  // limit of 2,000 characters. Can be specified if one wants to have the
  // BigQuery export to a specific Cloud Storage directory.
  string gcs_staging_dir = 3;

  // The schema to use when parsing the data from the source.
  //
  // Supported values for product imports:
  //
  // * `product` (default): One JSON [Product][google.cloud.retail.v2.Product]
  // per line. Each product must
  //   have a valid [Product.id][google.cloud.retail.v2.Product.id].
  // * `product_merchant_center`: See [Importing catalog data from Merchant
  //   Center](https://cloud.google.com/retail/recommendations-ai/docs/upload-catalog#mc).
  //
  // Supported values for user events imports:
  //
  // * `user_event` (default): One JSON
  // [UserEvent][google.cloud.retail.v2.UserEvent] per line.
  // * `user_event_ga360`: Using
  //   https://support.google.com/analytics/answer/3437719?hl=en.
  string data_schema = 4;
}

// The inline source for the input config for ImportProducts method.
message ProductInlineSource {
  // Required. A list of products to update/create. Each product must have a
  // valid [Product.id][google.cloud.retail.v2.Product.id]. Recommended max of
  // 10k items.
  repeated Product products = 1 [(google.api.field_behavior) = REQUIRED];
}

// The inline source for the input config for ImportUserEvents method.
message UserEventInlineSource {
  // Required. A list of user events to import. Recommended max of 10k items.
  repeated UserEvent user_events = 1 [(google.api.field_behavior) = REQUIRED];
}

// Configuration of destination for Import related errors.
message ImportErrorsConfig {
  // Required. Errors destination.
  oneof destination {
    // Google Cloud Storage path for import errors. This must be an empty,
    // existing Cloud Storage bucket. Import errors will be written to a file in
    // this bucket, one per line, as a JSON-encoded
    // `google.rpc.Status` message.
    string gcs_prefix = 1;
  }
}

// Request message for Import methods.
message ImportProductsRequest {
  // Required.
  // `projects/1234/locations/global/catalogs/default_catalog/branches/default_branch`
  //
  // If no updateMask is specified, requires products.create permission.
  // If updateMask is specified, requires products.update permission.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The desired input location of the data.
  ProductInputConfig input_config = 2 [(google.api.field_behavior) = REQUIRED];

  // The desired location of errors incurred during the Import.
  ImportErrorsConfig errors_config = 3;

  // Indicates which fields in the provided imported 'products' to update. If
  // not set, will by default update all fields.
  google.protobuf.FieldMask update_mask = 4;
}

// Request message for the ImportUserEvents request.
message ImportUserEventsRequest {
  // Required. `projects/1234/locations/global/catalogs/default_catalog`
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The desired input location of the data.
  UserEventInputConfig input_config = 2
      [(google.api.field_behavior) = REQUIRED];

  // The desired location of errors incurred during the Import. Cannot be set
  // for inline user event imports.
  ImportErrorsConfig errors_config = 3;
}

// The input config source for products.
message ProductInputConfig {
  // Required. The source of the input.
  oneof source {
    // The Inline source for the input content for products.
    ProductInlineSource product_inline_source = 1;

    // Google Cloud Storage location for the input content.
    GcsSource gcs_source = 2;

    // BigQuery input source.
    BigQuerySource big_query_source = 3;
  }
}

// The input config source for user events.
message UserEventInputConfig {
  // The source of the input.
  oneof source {
    // Required. The Inline source for the input content for UserEvents.
    UserEventInlineSource user_event_inline_source = 1
        [(google.api.field_behavior) = REQUIRED];

    // Required. Google Cloud Storage location for the input content.
    GcsSource gcs_source = 2 [(google.api.field_behavior) = REQUIRED];

    // Required. BigQuery input source.
    BigQuerySource big_query_source = 3
        [(google.api.field_behavior) = REQUIRED];
  }
}

// Metadata related to the progress of the Import operation. This will be
// returned by the google.longrunning.Operation.metadata field.
message ImportMetadata {
  // Operation create time.
  google.protobuf.Timestamp create_time = 1;

  // Operation last update time. If the operation is done, this is also the
  // finish time.
  google.protobuf.Timestamp update_time = 2;

  // Count of entries that were processed successfully.
  int64 success_count = 3;

  // Count of entries that encountered errors while processing.
  int64 failure_count = 4;
}

// Response of the
// [ImportProductsRequest][google.cloud.retail.v2.ImportProductsRequest]. If the
// long running operation is done, then this message is returned by the
// google.longrunning.Operations.response field if the operation was successful.
message ImportProductsResponse {
  // A sample of errors encountered while processing the request.
  repeated google.rpc.Status error_samples = 1;

  // Echoes the destination for the complete errors in the request if set.
  ImportErrorsConfig errors_config = 2;
}

// Response of the ImportUserEventsRequest. If the long running
// operation was successful, then this message is returned by the
// google.longrunning.Operations.response field if the operation was successful.
message ImportUserEventsResponse {
  // A sample of errors encountered while processing the request.
  repeated google.rpc.Status error_samples = 1;

  // Echoes the destination for the complete errors if this field was set in
  // the request.
  ImportErrorsConfig errors_config = 2;

  // Aggregated statistics of user event import status.
  UserEventImportSummary import_summary = 3;
}

// A summary of import result. The UserEventImportSummary summarizes
// the import status for user events.
message UserEventImportSummary {
  // Count of user events imported with complete existing catalog information.
  int64 joined_events_count = 1;

  // Count of user events imported, but with catalog information not found
  // in the imported catalog.
  int64 unjoined_events_count = 2;
}
