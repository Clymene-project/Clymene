// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.retail.v2beta;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/retail/v2beta/user_event.proto";
import "google/protobuf/struct.proto";

option csharp_namespace = "Google.Cloud.Retail.V2Beta";
option go_package = "google.golang.org/genproto/googleapis/cloud/retail/v2beta;retail";
option java_multiple_files = true;
option java_outer_classname = "PredictionServiceProto";
option java_package = "com.google.cloud.retail.v2beta";
option objc_class_prefix = "RETAIL";
option php_namespace = "Google\\Cloud\\Retail\\V2beta";
option ruby_package = "Google::Cloud::Retail::V2beta";

// Service for making recommendation prediction.
service PredictionService {
  option (google.api.default_host) = "retail.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/cloud-platform";

  // Makes a recommendation prediction.
  rpc Predict(PredictRequest) returns (PredictResponse) {
    option (google.api.http) = {
      post: "/v2beta/{placement=projects/*/locations/*/catalogs/*/placements/*}:predict"
      body: "*"
    };
  }
}

// Request message for Predict method.
message PredictRequest {
  // Required. Full resource name of the format:
  // {name=projects/*/locations/global/catalogs/default_catalog/placements/*}
  // The id of the recommendation engine placement. This id is used to identify
  // the set of models that will be used to make the prediction.
  //
  // We currently support three placements with the following IDs by default:
  //
  // * `shopping_cart`: Predicts products frequently bought together with one or
  //   more  products in the same shopping session. Commonly displayed after
  //   `add-to-cart` events, on product detail pages, or on the shopping cart
  //   page.
  //
  // * `home_page`: Predicts the next product that a user will most likely
  //   engage with or purchase based on the shopping or viewing history of the
  //   specified `userId` or `visitorId`. For example - Recommendations for you.
  //
  // * `product_detail`: Predicts the next product that a user will most likely
  //   engage with or purchase. The prediction is based on the shopping or
  //   viewing history of the specified `userId` or `visitorId` and its
  //   relevance to a specified `CatalogItem`. Typically used on product detail
  //   pages. For example - More products like this.
  //
  // * `recently_viewed_default`: Returns up to 75 products recently viewed by
  //   the specified `userId` or `visitorId`, most recent ones first. Returns
  //   nothing if neither of them has viewed any products yet. For example -
  //   Recently viewed.
  //
  // The full list of available placements can be seen at
  // https://console.cloud.google.com/recommendation/catalogs/default_catalog/placements
  string placement = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. Context about the user, what they are looking at and what action
  // they took to trigger the predict request. Note that this user event detail
  // won't be ingested to userEvent logs. Thus, a separate userEvent write
  // request is required for event logging.
  UserEvent user_event = 2 [(google.api.field_behavior) = REQUIRED];

  // Maximum number of results to return per page. Set this property
  // to the number of prediction results needed. If zero, the service will
  // choose a reasonable default. The maximum allowed value is 100. Values
  // above 100 will be coerced to 100.
  int32 page_size = 3;

  // The previous PredictResponse.next_page_token.
  string page_token = 4;

  // Filter for restricting prediction results with a length limit of 5,000
  // characters. Accepts values for tags and the `filterOutOfStockItems` flag.
  //
  //  * Tag expressions. Restricts predictions to products that match all of the
  //    specified tags. Boolean operators `OR` and `NOT` are supported if the
  //    expression is enclosed in parentheses, and must be separated from the
  //    tag values by a space. `-"tagA"` is also supported and is equivalent to
  //    `NOT "tagA"`. Tag values must be double quoted UTF-8 encoded strings
  //    with a size limit of 1,000 characters.
  //
  //  * filterOutOfStockItems. Restricts predictions to products that do not
  //  have a
  //    stockState value of OUT_OF_STOCK.
  //
  // Examples:
  //
  //  * tag=("Red" OR "Blue") tag="New-Arrival" tag=(NOT "promotional")
  //  * filterOutOfStockItems  tag=(-"promotional")
  //  * filterOutOfStockItems
  //
  // If your filter blocks all prediction results, nothing will be returned. If
  // you want generic (unfiltered) popular products to be returned instead, set
  // `strictFiltering` to false in `PredictRequest.params`.
  string filter = 5;

  // Use validate only mode for this prediction query. If set to true, a
  // dummy model will be used that returns arbitrary products.
  // Note that the validate only mode should only be used for testing the API,
  // or if the model is not ready.
  bool validate_only = 6;

  // Additional domain specific parameters for the predictions.
  //
  // Allowed values:
  //
  // * `returnProduct`: Boolean. If set to true, the associated product
  //    object will be returned in the `results.metadata` field in the
  //    prediction response.
  // * `returnScore`: Boolean. If set to true, the prediction 'score'
  //    corresponding to each returned product will be set in the
  //    `results.metadata` field in the prediction response. The given
  //    'score' indicates the probability of an product being clicked/purchased
  //    given the user's context and history.
  // * `strictFiltering`: Boolean. True by default. If set to false, the service
  //    will return generic (unfiltered) popular products instead of empty if
  //    your filter blocks all prediction results.
  map<string, google.protobuf.Value> params = 7;

  // The labels for the predict request.
  //
  //  * Label keys can contain lowercase letters, digits and hyphens, must start
  //    with a letter, and must end with a letter or digit.
  //  * Non-zero label values can contain lowercase letters, digits and hyphens,
  //    must start with a letter, and must end with a letter or digit.
  //  * No more than 64 labels can be associated with a given request.
  //
  // See https://goo.gl/xmQnxf for more information on and examples of labels.
  map<string, string> labels = 8;
}

// Response message for predict method.
message PredictResponse {
  // PredictionResult represents the recommendation prediction results.
  message PredictionResult {
    // ID of the recommended product
    string id = 1;

    // Additional product metadata / annotations.
    //
    // Possible values:
    //
    // * `product`: JSON representation of the product. Will be set if
    //   `returnProduct` is set to true in `PredictRequest.params`.
    // * `score`: Prediction score in double value. Will be set if
    //   `returnScore` is set to true in `PredictRequest.params`.
    map<string, google.protobuf.Value> metadata = 2;
  }

  // A list of recommended products. The order represents the ranking (from the
  // most relevant product to the least).
  repeated PredictionResult results = 1;

  // A unique attribution token. This should be included in the
  // [UserEvent][google.cloud.retail.v2beta.UserEvent] logs resulting from this
  // recommendation, which enables accurate attribution of recommendation model
  // performance.
  string attribution_token = 2;

  // IDs of products in the request that were missing from the inventory.
  repeated string missing_ids = 3;

  // True if the validateOnly property was set in the request.
  bool validate_only = 4;
}
